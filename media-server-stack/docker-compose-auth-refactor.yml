version: '3.8'

services:
  # Reverse Proxy - Traefik v3 with 2025 patterns
  traefik:
    image: traefik:v3.4
    container_name: traefik
    restart: unless-stopped
    command:
      # API Configuration
      - --api.dashboard=true
      - --api.insecure=false
      
      # Provider Configuration
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=proxy
      
      # Entrypoints Configuration
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      
      # Cloudflare Tunnel Configuration
      - --entrypoints.web.forwardedHeaders.trustedIPs=127.0.0.1/32,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entrypoints.websecure.forwardedHeaders.trustedIPs=127.0.0.1/32,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      
      # Security Configuration
      - --serversTransport.insecureSkipVerify=true
      
      # Logging
      - --log.level=INFO
      - --accesslog=true
      
      # Metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
      
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/data
    networks:
      - proxy
      - auth
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      
      # Dashboard
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik.entrypoints=web
      - traefik.http.routers.traefik.middlewares=authelia@docker
      - traefik.http.routers.traefik.service=api@internal
      
      # HTTPS redirect middleware
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      
      # Secure headers middleware
      - traefik.http.middlewares.secure-headers.headers.accessControlAllowMethods=GET,OPTIONS,PUT
      - traefik.http.middlewares.secure-headers.headers.accessControlMaxAge=100
      - traefik.http.middlewares.secure-headers.headers.hostsProxyHeaders=X-Forwarded-Host
      - traefik.http.middlewares.secure-headers.headers.referrerPolicy=same-origin
      - traefik.http.middlewares.secure-headers.headers.customRequestHeaders.X-Forwarded-Proto=https

  # Redis for Authelia sessions
  authelia_redis:
    image: redis:7-alpine
    container_name: authelia_redis
    restart: unless-stopped
    volumes:
      - authelia_redis_data:/data
    networks:
      - auth
    command: redis-server --requirepass ${REDIS_PASSWORD}

  # Authelia - Authentication server
  authelia:
    image: authelia/authelia:4.38
    container_name: authelia
    restart: unless-stopped
    depends_on:
      - authelia_redis
    environment:
      - TZ=${TZ}
      - AUTHELIA_JWT_SECRET=${JWT_SECRET}
      - AUTHELIA_SESSION_SECRET=${SESSION_SECRET}
      - AUTHELIA_STORAGE_ENCRYPTION_KEY=${STORAGE_ENCRYPTION_KEY}
      - AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET=${OIDC_HMAC_SECRET}
      - AUTHELIA_IDENTITY_PROVIDERS_OIDC_ISSUER_PRIVATE_KEY=${OIDC_PRIVATE_KEY}
    volumes:
      - authelia_data:/config
      - ./authelia:/config/authelia:ro
    networks:
      - auth
      - proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      
      # Authelia portal
      - traefik.http.routers.authelia.rule=Host(`auth.${DOMAIN}`)
      - traefik.http.routers.authelia.entrypoints=web
      - traefik.http.routers.authelia.middlewares=https-redirect@docker
      - traefik.http.services.authelia.loadbalancer.server.port=9091
      
      # HTTPS router
      - traefik.http.routers.authelia-secure.rule=Host(`auth.${DOMAIN}`)
      - traefik.http.routers.authelia-secure.entrypoints=websecure
      - traefik.http.routers.authelia-secure.tls=true
      - traefik.http.services.authelia-secure.loadbalancer.server.port=9091
      
      # ForwardAuth middleware
      - traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/authz/forward-auth
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - proxy

  # Dashboard
  dashboard:
    image: nginx:alpine
    container_name: dashboard
    restart: unless-stopped
    volumes:
      - ./simple-dashboard.html:/usr/share/nginx/html/index.html:ro
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.dashboard.rule=Host(`home.${DOMAIN}`)
      - traefik.http.routers.dashboard.entrypoints=web
      - traefik.http.routers.dashboard.middlewares=https-redirect@docker
      - traefik.http.services.dashboard.loadbalancer.server.port=80

  # Media Server
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - JELLYFIN_PublishedServerUrl=https://jellyfin.${DOMAIN}
    volumes:
      - jellyfin_config:/config
      - ${DATA_ROOT}/media:/data/media:ro
      - /dev/shm:/data/transcode
    networks:
      - proxy
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN}`)
      - traefik.http.routers.jellyfin.entrypoints=web
      - traefik.http.routers.jellyfin.middlewares=https-redirect@docker
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096

  # Media Management Services
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - sonarr_config:/config
      - ${DATA_ROOT}:/data
    networks:
      - proxy
      - media
    depends_on:
      - prowlarr
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)
      - traefik.http.routers.sonarr.entrypoints=web
      - traefik.http.routers.sonarr.middlewares=https-redirect@docker,authelia@docker
      - traefik.http.services.sonarr.loadbalancer.server.port=8989

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - radarr_config:/config
      - ${DATA_ROOT}:/data
    networks:
      - proxy
      - media
    depends_on:
      - prowlarr
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)
      - traefik.http.routers.radarr.entrypoints=web
      - traefik.http.routers.radarr.middlewares=https-redirect@docker,authelia@docker
      - traefik.http.services.radarr.loadbalancer.server.port=7878

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - prowlarr_config:/config
    networks:
      - proxy
      - media
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)
      - traefik.http.routers.prowlarr.entrypoints=web
      - traefik.http.routers.prowlarr.middlewares=https-redirect@docker,authelia@docker
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - overseerr_config:/config
    networks:
      - proxy
      - media
    depends_on:
      - sonarr
      - radarr
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.overseerr.rule=Host(`overseerr.${DOMAIN}`)
      - traefik.http.routers.overseerr.entrypoints=web
      - traefik.http.routers.overseerr.middlewares=https-redirect@docker,authelia@docker
      - traefik.http.services.overseerr.loadbalancer.server.port=5055

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - lidarr_config:/config
      - ${DATA_ROOT}/media/music:/music
    networks:
      - proxy
      - media
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN}`)
      - traefik.http.routers.lidarr.entrypoints=web
      - traefik.http.routers.lidarr.middlewares=https-redirect@docker,authelia@docker
      - traefik.http.services.lidarr.loadbalancer.server.port=8686

  # Homarr Dashboard
  homarr:
    image: ghcr.io/ajnart/homarr:latest
    container_name: homarr
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - BASE_URL=https://homarr.${DOMAIN}
    volumes:
      - homarr_configs:/app/data/configs
      - homarr_icons:/app/public/icons
      - homarr_data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.homarr.rule=Host(`homarr.${DOMAIN}`)
      - traefik.http.routers.homarr.entrypoints=web
      - traefik.http.routers.homarr.middlewares=https-redirect@docker,authelia@docker
      - traefik.http.services.homarr.loadbalancer.server.port=7575

networks:
  proxy:
    external: true
  auth:
    internal: true
  media:
    internal: true

volumes:
  traefik_data:
  authelia_data:
  authelia_redis_data:
  jellyfin_config:
  sonarr_config:
  radarr_config:
  prowlarr_config:
  overseerr_config:
  lidarr_config:
  homarr_configs:
  homarr_icons:
  homarr_data: