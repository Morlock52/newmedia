# Authelia Configuration
theme: dark
default_redirection_url: https://media.example.com

server:
  host: 0.0.0.0
  port: 9091
  path: ""
  buffers:
    read: 4096
    write: 4096
  timeouts:
    read: 6s
    write: 6s
    idle: 30s
  enable_pprof: false
  enable_expvars: false

log:
  level: info
  format: json
  file_path: /config/authelia.log
  keep_stdout: true

totp:
  issuer: Media Server
  period: 30
  skew: 1
  algorithm: sha1
  digits: 6

webauthn:
  disable: false
  display_name: Media Server Auth
  attestation_conveyance_preference: indirect
  user_verification: preferred
  timeout: 60s

duo_api:
  disable: true

authentication_backend:
  password_reset:
    disable: false
    custom_url: ""
  
  refresh_interval: 5m
  
  # LDAP Backend
  ldap:
    implementation: activedirectory
    url: ldaps://ldap.example.com:636
    timeout: 5s
    start_tls: false
    tls:
      server_name: ldap.example.com
      skip_verify: false
      minimum_version: TLS1.2
    base_dn: DC=example,DC=com
    additional_users_dn: OU=users
    users_filter: (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
    additional_groups_dn: OU=groups
    groups_filter: (&(member={dn})(objectClass=group))
    group_name_attribute: cn
    username_attribute: sAMAccountName
    mail_attribute: mail
    display_name_attribute: displayName
    user: CN=authelia,OU=service-accounts,DC=example,DC=com
    password: ${LDAP_PASSWORD}

  # File Backend (Fallback)
  file:
    path: /config/users_database.yml
    password:
      algorithm: argon2id
      iterations: 3
      memory: 65536
      parallelism: 4
      key_length: 32
      salt_length: 16
    search:
      email: false
      case_insensitive: false

access_control:
  default_policy: deny
  
  networks:
    - name: internal
      networks:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
  
  rules:
    # Public access
    - domain: media.example.com
      policy: bypass
      resources:
        - "^/api/health$"
        - "^/api/status$"
    
    # Admin access
    - domain: 
        - portainer.media.example.com
        - grafana.media.example.com
        - prometheus.media.example.com
      policy: two_factor
      subject:
        - "group:admins"
    
    # Media services - authenticated users
    - domain:
        - jellyfin.media.example.com
        - music.media.example.com
        - audiobooks.media.example.com
        - photos.media.example.com
        - books.media.example.com
      policy: one_factor
      subject:
        - "group:users"
        - "group:family"
    
    # Download services - power users only
    - domain:
        - sonarr.media.example.com
        - radarr.media.example.com
        - lidarr.media.example.com
        - qbittorrent.media.example.com
      policy: two_factor
      subject:
        - "group:power-users"
        - "group:admins"
    
    # API access
    - domain: api.media.example.com
      policy: one_factor
      methods:
        - GET
    
    - domain: api.media.example.com
      policy: two_factor
      methods:
        - POST
        - PUT
        - DELETE
      subject:
        - "group:api-users"
    
    # Internal network bypass
    - domain: "*.media.example.com"
      policy: bypass
      networks:
        - internal

session:
  name: authelia_session
  domain: media.example.com
  same_site: lax
  secret: ${SESSION_SECRET}
  expiration: 1h
  inactivity: 15m
  remember_me_duration: 1M
  
  redis:
    host: redis
    port: 6379
    password: ${REDIS_PASSWORD}
    database_index: 0
    maximum_active_connections: 8
    minimum_idle_connections: 0
    tls:
      server_name: redis.media.example.com
      skip_verify: false
      minimum_version: TLS1.2

regulation:
  max_retries: 3
  find_time: 2m
  ban_time: 5m

storage:
  encryption_key: ${STORAGE_ENCRYPTION_KEY}
  
  postgres:
    host: postgres
    port: 5432
    database: authelia
    schema: public
    username: authelia
    password: ${POSTGRES_AUTHELIA_PASSWORD}
    timeout: 5s
    ssl:
      mode: prefer
      root_certificate: /config/ca.pem
      certificate: /config/cert.pem
      key: /config/key.pem

notifier:
  disable_startup_check: false
  
  smtp:
    host: smtp.gmail.com
    port: 587
    timeout: 5s
    username: notifications@example.com
    password: ${SMTP_PASSWORD}
    sender: "Media Server <notifications@example.com>"
    identifier: media.example.com
    subject: "[Media Server] {title}"
    startup_check_address: test@example.com
    disable_require_tls: false
    disable_html_emails: false
    tls:
      server_name: smtp.gmail.com
      skip_verify: false
      minimum_version: TLS1.2

identity_providers:
  oidc:
    hmac_secret: ${OIDC_HMAC_SECRET}
    issuer_private_key: |
      -----BEGIN RSA PRIVATE KEY-----
      # Your private key here
      -----END RSA PRIVATE KEY-----
    
    access_token_lifespan: 1h
    authorize_code_lifespan: 1m
    id_token_lifespan: 1h
    refresh_token_lifespan: 90d
    enable_client_debug_messages: false
    enforce_pkce: public_clients_only
    enable_pkce_plain_challenge: false
    
    cors:
      endpoints:
        - authorization
        - token
        - revocation
        - introspection
      allowed_origins:
        - https://media.example.com
      allowed_origins_from_client_redirect_uris: true
    
    clients:
      - id: jellyfin
        description: Jellyfin Media Server
        secret: ${JELLYFIN_OIDC_SECRET}
        public: false
        authorization_policy: one_factor
        consent_mode: implicit
        pre_configured_consent_duration: 1y
        scopes:
          - openid
          - profile
          - email
          - groups
        redirect_uris:
          - https://jellyfin.media.example.com/sso/oidc/redirect
        grant_types:
          - authorization_code
        response_types:
          - code
        response_modes:
          - query
        userinfo_signing_algorithm: none
      
      - id: grafana
        description: Grafana Monitoring
        secret: ${GRAFANA_OIDC_SECRET}
        public: false
        authorization_policy: two_factor
        consent_mode: explicit
        scopes:
          - openid
          - profile
          - email
          - groups
        redirect_uris:
          - https://grafana.media.example.com/login/generic_oauth
        grant_types:
          - authorization_code
        response_types:
          - code
        response_modes:
          - query
        userinfo_signing_algorithm: RS256

telemetry:
  metrics:
    enabled: true
    address: tcp://0.0.0.0:9959
    buffers:
      read: 4096
      write: 4096
    timeouts:
      read: 6s
      write: 6s
      idle: 30s