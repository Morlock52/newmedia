version: "3.9"

# This is a SECURE template for the media server docker-compose.yml
# All hardcoded secrets have been removed and replaced with environment variables

# Networks configuration with proper segmentation
networks:
  frontend:
    name: media_frontend
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  
  backend:
    name: media_backend
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.20.1.0/24
  
  vpn:
    name: media_vpn
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.20.2.0/24

# Secrets configuration (for Docker Swarm mode)
secrets:
  sonarr_api_key:
    external: true
  radarr_api_key:
    external: true
  prowlarr_api_key:
    external: true
  jellyfin_api_key:
    external: true
  overseerr_api_key:
    external: true

services:
  # Authentication Service - Authelia
  authelia:
    image: authelia/authelia:latest
    container_name: authelia
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    environment:
      - TZ=${TZ:-America/New_York}
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_storage_key
    volumes:
      - ./config/authelia:/config
    networks:
      - frontend
      - backend
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_storage_key
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9091/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authelia.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.authelia.entrypoints=websecure"
      - "traefik.http.routers.authelia.tls.certresolver=cloudflare"
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://auth.${DOMAIN}"
      - "traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email"

  # Homepage Dashboard - Secured
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/New_York}
      # API keys passed as environment variables
      - HOMEPAGE_VAR_SONARR_API_KEY=${SONARR_API_KEY}
      - HOMEPAGE_VAR_RADARR_API_KEY=${RADARR_API_KEY}
      - HOMEPAGE_VAR_PROWLARR_API_KEY=${PROWLARR_API_KEY}
      - HOMEPAGE_VAR_JELLYFIN_API_KEY=${JELLYFIN_API_KEY}
      - HOMEPAGE_VAR_OVERSEERR_API_KEY=${OVERSEERR_API_KEY}
      - HOMEPAGE_VAR_QBITTORRENT_PASSWORD=${QBITTORRENT_PASSWORD}
    volumes:
      - ./config/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - frontend
      - backend
    restart: unless-stopped
    depends_on:
      - authelia
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.rule=Host(`home.${DOMAIN}`)"
      - "traefik.http.routers.homepage.entrypoints=websecure"
      - "traefik.http.routers.homepage.tls.certresolver=cloudflare"
      - "traefik.http.services.homepage.loadbalancer.server.port=3000"
      - "traefik.http.routers.homepage.middlewares=authelia,security-headers,rate-limit"

  # Jellyfin Media Server - Secured
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETUID
      - SETGID
      - NET_RAW  # For DLNA
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/New_York}
      - JELLYFIN_PublishedServerUrl=https://jellyfin.${DOMAIN}
    volumes:
      - ./config/jellyfin:/config
      - ./data/media:/media:ro
      - ./cache/jellyfin:/cache
      - /dev/dri:/dev/dri  # Hardware acceleration
    group_add:
      - "${RENDER_GROUP_ID:-989}"  # render group for hardware acceleration
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN}`)"
      - "traefik.http.routers.jellyfin.entrypoints=websecure"
      - "traefik.http.routers.jellyfin.tls.certresolver=cloudflare"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
      - "traefik.http.routers.jellyfin.middlewares=security-headers,compression"

  # Sonarr TV Show Management - Secured
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/New_York}
    volumes:
      - ./config/sonarr:/config
      - ./data:/data
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - qbittorrent
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "X-Api-Key: ${SONARR_API_KEY}", "http://localhost:8989/api/v3/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls.certresolver=cloudflare"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      - "traefik.http.routers.sonarr.middlewares=authelia,security-headers,rate-limit"

  # Radarr Movie Management - Secured
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/New_York}
    volumes:
      - ./config/radarr:/config
      - ./data:/data
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - qbittorrent
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "X-Api-Key: ${RADARR_API_KEY}", "http://localhost:7878/api/v3/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.tls.certresolver=cloudflare"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
      - "traefik.http.routers.radarr.middlewares=authelia,security-headers,rate-limit"

  # Prowlarr Indexer Management - Secured
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/New_York}
    volumes:
      - ./config/prowlarr:/config
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - sonarr
      - radarr
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "X-Api-Key: ${PROWLARR_API_KEY}", "http://localhost:9696/api/v1/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)"
      - "traefik.http.routers.prowlarr.entrypoints=websecure"
      - "traefik.http.routers.prowlarr.tls.certresolver=cloudflare"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
      - "traefik.http.routers.prowlarr.middlewares=authelia,security-headers,rate-limit"

  # VPN Container - Gluetun
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - ./config/gluetun:/gluetun
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_PROVIDER:-nordvpn}
      - VPN_TYPE=openvpn
      - OPENVPN_USER=${VPN_USERNAME}
      - OPENVPN_PASSWORD=${VPN_PASSWORD}
      - SERVER_COUNTRIES=${VPN_COUNTRY:-Switzerland}
      - TZ=${TZ:-America/New_York}
      - FIREWALL_OUTBOUND_SUBNETS=172.20.0.0/16
      - DOT=off
    networks:
      - vpn
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://www.google.com"]
      interval: 30s
      timeout: 10s
      retries: 3

  # qBittorrent - Secured and routed through VPN
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:gluetun"  # Route through VPN
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    depends_on:
      gluetun:
        condition: service_healthy
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/New_York}
      - WEBUI_PORT=8080
    volumes:
      - ./config/qbittorrent:/config
      - ./data/downloads:/data/downloads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Traefik Reverse Proxy - Secured
  traefik:
    image: traefik:v3.0
    container_name: traefik
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    networks:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik:/etc/traefik
      - ./config/traefik/acme.json:/acme.json
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=authelia,security-headers,rate-limit"

# Volume definitions for persistent data
volumes:
  prometheus_data:
  grafana_data: