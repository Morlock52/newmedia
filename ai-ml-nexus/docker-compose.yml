version: '3.8'

services:
  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AI/ML Orchestrator Service
  ai-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - TF_BACKEND=tensorflow-gpu
      - TF_FORCE_GPU_ALLOW_GROWTH=true
      - ENABLE_GPU=true
    volumes:
      - ./models:/app/models
      - ./cache:/app/cache
      - media_data:/media
    depends_on:
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Recommendation Engine
  recommendation-engine:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["node", "services/recommendation-engine.js"]
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - TF_BACKEND=tensorflow-gpu
    volumes:
      - ./models:/app/models
    depends_on:
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

  # Content Analysis Pipeline
  content-analysis:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["node", "services/content-analysis.js"]
    ports:
      - "8082:8082"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - TF_BACKEND=tensorflow-gpu
    volumes:
      - ./models:/app/models
      - media_data:/media
    depends_on:
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

  # Voice Processing System
  voice-processor:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["node", "services/voice-processor.js"]
    ports:
      - "8083:8083"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
    volumes:
      - ./models:/app/models
    depends_on:
      - redis

  # Neural Compression System
  neural-compression:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["node", "services/neural-compression.js"]
    ports:
      - "8084:8084"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - TF_BACKEND=tensorflow-gpu
    volumes:
      - ./models:/app/models
      - media_data:/media
      - compressed_data:/compressed
    depends_on:
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

  # Emotion Detection System
  emotion-detection:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["node", "services/emotion-detection.js"]
    ports:
      - "8085:8085"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - TF_BACKEND=tensorflow-gpu
    volumes:
      - ./models:/app/models
    depends_on:
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

  # Model Training Worker
  training-worker:
    build:
      context: .
      dockerfile: Dockerfile.training
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - TF_BACKEND=tensorflow-gpu
      - ENABLE_DISTRIBUTED_TRAINING=true
    volumes:
      - ./models:/app/models
      - ./training_data:/app/training_data
    depends_on:
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Nginx for load balancing
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-orchestrator
      - recommendation-engine
      - content-analysis
      - voice-processor
      - neural-compression
      - emotion-detection
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus

volumes:
  redis_data:
  media_data:
  compressed_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: nexus-ai-network
    driver: bridge