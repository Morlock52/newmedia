# Secure Docker Compose Configuration for Media Server 2025
# Implements comprehensive container security strategy
version: '3.9'

# =====================================================================
# NETWORKS - Segmented for Security
# =====================================================================
networks:
  dmz:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-dmz
    ipam:
      config:
        - subnet: 172.30.0.0/24
          gateway: 172.30.0.1
    labels:
      - "security.zone=dmz"
      - "security.firewall=strict"
  
  frontend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.30.1.0/24
    labels:
      - "security.zone=frontend"
      - "security.firewall=moderate"
  
  backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.30.2.0/24
    labels:
      - "security.zone=backend"
      - "security.firewall=strict"
  
  downloads:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.30.3.0/24
    labels:
      - "security.zone=downloads"
      - "security.firewall=paranoid"
  
  monitoring:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.30.4.0/24
    labels:
      - "security.zone=monitoring"
      - "security.firewall=moderate"

# =====================================================================
# SECRETS - Secure Credential Management
# =====================================================================
secrets:
  # Database Credentials
  postgres_root_password:
    external: true
  postgres_user_password:
    external: true
  redis_password:
    external: true
  
  # Media Server API Keys
  jellyfin_api_key:
    external: true
  plex_token:
    external: true
  
  # Arr Suite API Keys
  sonarr_api_key:
    external: true
  radarr_api_key:
    external: true
  lidarr_api_key:
    external: true
  prowlarr_api_key:
    external: true
  bazarr_api_key:
    external: true
  
  # VPN Credentials
  vpn_private_key:
    external: true
  
  # Authentication
  authelia_jwt_secret:
    external: true
  authelia_session_secret:
    external: true
  authelia_storage_encryption_key:
    external: true
  
  # SSL Certificates
  ssl_cert:
    file: ./secrets/ssl/cert.pem
  ssl_key:
    file: ./secrets/ssl/key.pem

# =====================================================================
# VOLUMES - With Security Labels
# =====================================================================
volumes:
  # Core Infrastructure
  traefik_certs:
    labels:
      - "security.sensitive=high"
  authelia_data:
    labels:
      - "security.sensitive=critical"
  redis_data:
    labels:
      - "security.sensitive=high"
  postgres_data:
    labels:
      - "security.sensitive=critical"
  
  # Media Server Configs
  jellyfin_config:
    labels:
      - "security.sensitive=medium"
  plex_config:
    labels:
      - "security.sensitive=medium"
  
  # Arr Suite Configs
  sonarr_config:
    labels:
      - "security.sensitive=medium"
  radarr_config:
    labels:
      - "security.sensitive=medium"
  
  # Security volumes
  trivy_cache:
    labels:
      - "security.sensitive=low"
  falco_data:
    labels:
      - "security.sensitive=high"

# =====================================================================
# SERVICES - Secured Configurations
# =====================================================================
services:
  # =========================
  # Security Infrastructure
  # =========================
  
  # Security Scanner - Trivy
  trivy-scanner:
    image: aquasec/trivy:latest
    container_name: trivy-scanner
    profiles: [security]
    user: "1001:1001"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor=docker-default
    cap_drop:
      - ALL
    tmpfs:
      - /tmp:size=100M,mode=1770,uid=1001,gid=1001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy_cache:/root/.cache/trivy
      - ./security/reports:/reports:rw
    networks:
      - monitoring
    command: server --listen 0.0.0.0:8080
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Runtime Security - Falco
  falco:
    image: falcosecurity/falco:latest
    container_name: falco
    profiles: [security]
    privileged: true  # Required for kernel module
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock:ro
      - /dev:/host/dev:ro
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - ./security/falco/rules:/etc/falco/rules.d:ro
      - falco_data:/data
    networks:
      - monitoring
    command: >
      /usr/bin/falco
      -A
      -K /host/proc/1/root/usr/src
      -k https://0.0.0.0:8765/k8s-audit

  # =========================
  # Reverse Proxy - Secured
  # =========================
  
  traefik:
    image: traefik:v3.0
    container_name: traefik
    user: "1001:1001"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor=traefik-profile
      - seccomp=./security/seccomp/traefik.json
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    secrets:
      - ssl_cert
      - ssl_key
    tmpfs:
      - /tmp:size=50M,mode=1770,uid=1001,gid=1001
    environment:
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
      - ./security/traefik/dynamic:/etc/traefik/dynamic:ro
      - ./security/traefik/static.yml:/etc/traefik/traefik.yml:ro
    networks:
      - dmz
      - frontend
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =========================
  # Authentication - Authelia
  # =========================
  
  authelia:
    image: authelia/authelia:latest
    container_name: authelia
    user: "1001:1001"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor=authelia-profile
      - seccomp=./security/seccomp/authelia.json
    cap_drop:
      - ALL
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_storage_encryption_key
      - postgres_user_password
      - redis_password
    tmpfs:
      - /tmp:size=50M,mode=1770,uid=1001,gid=1001
    environment:
      - TZ=${TZ:-UTC}
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_storage_encryption_key
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE=/run/secrets/postgres_user_password
      - AUTHELIA_SESSION_REDIS_PASSWORD_FILE=/run/secrets/redis_password
    volumes:
      - authelia_data:/data
      - ./security/authelia/configuration.yml:/config/configuration.yml:ro
    networks:
      - frontend
      - backend
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "authelia", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =========================
  # Media Servers - Secured
  # =========================
  
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    user: "1001:1001"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor=media-server-profile
      - seccomp=./security/seccomp/media-server.json
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETUID
      - SETGID
    secrets:
      - jellyfin_api_key
    tmpfs:
      - /tmp:size=200M,mode=1770,uid=1001,gid=1001
      - /var/log/jellyfin:size=50M,mode=1770,uid=1001,gid=1001
      - /cache:size=500M,mode=1770,uid=1001,gid=1001
    environment:
      - PUID=1001
      - PGID=1001
      - TZ=${TZ:-UTC}
      - UMASK=077
      - JELLYFIN_API_KEY_FILE=/run/secrets/jellyfin_api_key
    volumes:
      - jellyfin_config:/config:rw
      - ${MEDIA_PATH:-./media}:/media:ro
      - /transcode:/transcode:rw
    devices:
      - /dev/dri:/dev/dri  # GPU access for hardware transcoding
    networks:
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN}`)"
      - "traefik.http.routers.jellyfin.entrypoints=websecure"
      - "traefik.http.routers.jellyfin.tls=true"
      - "traefik.http.routers.jellyfin.middlewares=authelia@docker"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =========================
  # Arr Suite - Secured
  # =========================
  
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    user: "1001:1001"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor=arr-suite-profile
      - seccomp=./security/seccomp/arr-suite.json
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETUID
      - SETGID
    secrets:
      - sonarr_api_key
    tmpfs:
      - /tmp:size=100M,mode=1770,uid=1001,gid=1001
      - /var/log/sonarr:size=50M,mode=1770,uid=1001,gid=1001
    environment:
      - PUID=1001
      - PGID=1001
      - TZ=${TZ:-UTC}
      - UMASK=077
      - SONARR__ApiKey__FILE=/run/secrets/sonarr_api_key
    volumes:
      - sonarr_config:/config:rw
      - ${MEDIA_PATH:-./media}:/media
      - ${DOWNLOADS_PATH:-./downloads}:/downloads
    networks:
      - frontend
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.middlewares=authelia@docker"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    user: "1001:1001"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor=arr-suite-profile
      - seccomp=./security/seccomp/arr-suite.json
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETUID
      - SETGID
    secrets:
      - radarr_api_key
    tmpfs:
      - /tmp:size=100M,mode=1770,uid=1001,gid=1001
      - /var/log/radarr:size=50M,mode=1770,uid=1001,gid=1001
    environment:
      - PUID=1001
      - PGID=1001
      - TZ=${TZ:-UTC}
      - UMASK=077
      - RADARR__ApiKey__FILE=/run/secrets/radarr_api_key
    volumes:
      - radarr_config:/config:rw
      - ${MEDIA_PATH:-./media}:/media
      - ${DOWNLOADS_PATH:-./downloads}:/downloads
    networks:
      - frontend
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.middlewares=authelia@docker"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7878/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =========================
  # Download Clients - Isolated
  # =========================
  
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    user: "1001:1001"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor=download-client-profile
      - seccomp=./security/seccomp/download-client.json
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETUID
      - SETGID
      - NET_ADMIN  # Required for VPN
    tmpfs:
      - /tmp:size=200M,mode=1770,uid=1001,gid=1001
      - /var/log/qbittorrent:size=50M,mode=1770,uid=1001,gid=1001
    environment:
      - PUID=1001
      - PGID=1001
      - TZ=${TZ:-UTC}
      - UMASK=077
      - WEBUI_PORT=8080
    volumes:
      - qbittorrent_config:/config:rw
      - ${DOWNLOADS_PATH:-./downloads}:/downloads
    network_mode: "service:vpn"
    depends_on:
      - vpn
    restart: unless-stopped

  vpn:
    image: qmcgaw/gluetun:latest
    container_name: vpn
    cap_add:
      - NET_ADMIN
    security_opt:
      - no-new-privileges:true
    secrets:
      - vpn_private_key
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_PROVIDER:-mullvad}
      - VPN_TYPE=wireguard
      - WIREGUARD_PRIVATE_KEY_FILE=/run/secrets/vpn_private_key
      - WIREGUARD_ADDRESSES=${VPN_ADDRESSES}
      - FIREWALL_OUTBOUND_SUBNETS=172.30.0.0/16
      - FIREWALL_INPUT_PORTS=8080  # qBittorrent WebUI
      - DOT=on
      - BLOCK_MALICIOUS=on
      - BLOCK_SURVEILLANCE=on
      - BLOCK_ADS=on
    networks:
      - downloads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/gluetun-entrypoint", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =========================
  # Database - Secured
  # =========================
  
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    user: "999:999"  # postgres user
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor=postgres-profile
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETUID
      - SETGID
    secrets:
      - postgres_root_password
      - postgres_user_password
    tmpfs:
      - /tmp:size=100M,mode=1770,uid=999,gid=999
      - /run/postgresql:size=10M,mode=1770,uid=999,gid=999
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_root_password
      - POSTGRES_USER=media_user
      - POSTGRES_DB=media_db
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U media_user -d media_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =========================
  # Cache - Secured
  # =========================
  
  redis:
    image: redis:7-alpine
    container_name: redis
    user: "999:999"  # redis user
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor=redis-profile
    cap_drop:
      - ALL
    secrets:
      - redis_password
    tmpfs:
      - /tmp:size=50M,mode=1770,uid=999,gid=999
    command: >
      redis-server
      --requirepass $$(cat /run/secrets/redis_password)
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =========================
  # Monitoring - Secured
  # =========================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: "1001:1001"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor=monitoring-profile
    cap_drop:
      - ALL
    tmpfs:
      - /tmp:size=50M,mode=1770,uid=1001,gid=1001
    volumes:
      - ./security/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./security/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: "1001:1001"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor=monitoring-profile
    cap_drop:
      - ALL
    tmpfs:
      - /tmp:size=50M,mode=1770,uid=1001,gid=1001
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeme}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN}
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_CONTENT_SECURITY_POLICY=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./security/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - frontend
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.middlewares=authelia@docker"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped