version: '3.8'

# Master Orchestration for Integrated Media Server Platform
# Components: AI/ML, AR/VR, Quantum Security, Blockchain, Voice AI, Media Stack

networks:
  # Primary application network
  media-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  # Secure network for sensitive services
  secure-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
  
  # External facing network
  public-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  # Shared data volumes
  media-data:
    driver: local
  ai-models:
    driver: local
  blockchain-data:
    driver: local
  quantum-keys:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  traefik-data:
    driver: local

services:
  # =================
  # LOAD BALANCER & REVERSE PROXY
  # =================
  traefik:
    image: traefik:v3.0
    container_name: traefik-master
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/etc/traefik/dynamic
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --log.level=INFO
      - --accesslog=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/letsencrypt
      - ./config/traefik:/etc/traefik/dynamic:ro
    networks:
      - public-network
      - media-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.dashboard.tls.certresolver=letsencrypt
      - traefik.http.routers.dashboard.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}

  # =================
  # QUANTUM SECURITY LAYER
  # =================
  quantum-security:
    build: ./quantum-security
    container_name: quantum-security
    restart: unless-stopped
    ports:
      - "8443:8443"
    volumes:
      - quantum-keys:/app/keys
      - ./config/quantum:/app/config:ro
    networks:
      - secure-network
      - media-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.quantum.rule=Host(`quantum.${DOMAIN}`)
      - traefik.http.routers.quantum.tls.certresolver=letsencrypt
      - traefik.http.services.quantum.loadbalancer.server.port=8443
    environment:
      - NODE_ENV=production
      - QUANTUM_MODE=production
      - LOG_LEVEL=info
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # AI/ML NEXUS
  # =================
  ai-ml-nexus:
    build: ./ai-ml-nexus
    container_name: ai-ml-nexus
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - ai-models:/app/models
      - media-data:/app/media:ro
      - ./config/ai:/app/config:ro
    networks:
      - media-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.ai.rule=Host(`ai.${DOMAIN}`)
      - traefik.http.routers.ai.tls.certresolver=letsencrypt
      - traefik.http.services.ai.loadbalancer.server.port=3000
    environment:
      - NODE_ENV=production
      - CUDA_VISIBLE_DEVICES=0
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # AR/VR MEDIA SYSTEM
  # =================
  ar-vr-media:
    build: ./ar-vr-media
    container_name: ar-vr-media
    restart: unless-stopped
    ports:
      - "8082:8080"
    volumes:
      - media-data:/app/media:ro
      - ./config/ar-vr:/app/config:ro
    networks:
      - media-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.arvr.rule=Host(`vr.${DOMAIN}`)
      - traefik.http.routers.arvr.tls.certresolver=letsencrypt
      - traefik.http.services.arvr.loadbalancer.server.port=8080
    environment:
      - NODE_ENV=production
      - WEBXR_ENABLED=true
      - SPATIAL_AUDIO=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # VOICE AI SYSTEM
  # =================
  voice-ai-system:
    build: ./voice-ai-system
    container_name: voice-ai
    restart: unless-stopped
    ports:
      - "3002:3000"
    volumes:
      - ./config/voice:/app/config:ro
      - ai-models:/app/models
    networks:
      - media-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.voice.rule=Host(`voice.${DOMAIN}`)
      - traefik.http.routers.voice.tls.certresolver=letsencrypt
      - traefik.http.services.voice.loadbalancer.server.port=3000
    environment:
      - NODE_ENV=production
      - SPEECH_API_KEY=${SPEECH_API_KEY}
      - TTS_PROVIDER=azure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # BLOCKCHAIN INTEGRATION
  # =================
  web3-blockchain:
    build: ./web3-blockchain-integration/api
    container_name: web3-blockchain
    restart: unless-stopped
    ports:
      - "3003:3000"
    volumes:
      - blockchain-data:/app/data
      - ./config/blockchain:/app/config:ro
    networks:
      - media-network
      - secure-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.web3.rule=Host(`web3.${DOMAIN}`)
      - traefik.http.routers.web3.tls.certresolver=letsencrypt
      - traefik.http.services.web3.loadbalancer.server.port=3000
    environment:
      - NODE_ENV=production
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - PRIVATE_KEY=${BLOCKCHAIN_PRIVATE_KEY}
      - IPFS_GATEWAY=${IPFS_GATEWAY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # MEDIA STACK CORE
  # =================
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin-core
    restart: unless-stopped
    ports:
      - "8096:8096"
    volumes:
      - ./config/jellyfin:/config
      - media-data:/media
      - ./cache/jellyfin:/cache
    networks:
      - media-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=Host(`media.${DOMAIN}`)
      - traefik.http.routers.jellyfin.tls.certresolver=letsencrypt
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    environment:
      - JELLYFIN_PublishedServerUrl=https://media.${DOMAIN}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # =================
  # DATABASE LAYER
  # =================
  postgres:
    image: postgres:15-alpine
    container_name: postgres-master
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./config/postgres/init-performance.sql:/docker-entrypoint-initdb.d/init-performance.sql:ro
    networks:
      - secure-network
    environment:
      - POSTGRES_DB=mediaserver
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis-master
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - secure-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # MONITORING & LOGGING
  # =================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-master
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
    networks:
      - media-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)
      - traefik.http.routers.prometheus.tls.certresolver=letsencrypt
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-master
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - media-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
      - traefik.http.routers.grafana.tls.certresolver=letsencrypt
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # CENTRAL CONFIGURATION API
  # =================
  config-server:
    build: ./config-server
    container_name: config-server
    restart: unless-stopped
    ports:
      - "3010:3000"
    volumes:
      - ./config:/app/config:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - media-network
      - secure-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.config.rule=Host(`config.${DOMAIN}`)
      - traefik.http.routers.config.tls.certresolver=letsencrypt
      - traefik.http.services.config.loadbalancer.server.port=3000
    environment:
      - NODE_ENV=production
      - CONFIG_PATH=/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # HOLOGRAPHIC DASHBOARD
  # =================
  holographic-dashboard:
    build: ./holographic-dashboard-demo/holographic-dashboard
    container_name: holographic-dashboard
    restart: unless-stopped
    ports:
      - "8088:8080"
    volumes:
      - ./config/dashboard:/app/config:ro
    networks:
      - media-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`dashboard.${DOMAIN}`)
      - traefik.http.routers.dashboard.tls.certresolver=letsencrypt
      - traefik.http.services.dashboard.loadbalancer.server.port=8080
    environment:
      - NODE_ENV=production
      - API_BASE_URL=https://api.${DOMAIN}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # NGINX EDGE CACHE
  # =================
  nginx-cache:
    image: nginx:alpine
    container_name: nginx-cache
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - ./config/nginx/nginx-cache.conf:/etc/nginx/nginx.conf:ro
      - ./cache/nginx:/var/cache/nginx
    networks:
      - media-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.cache.rule=Host(`cache.${DOMAIN}`)
      - traefik.http.routers.cache.tls.certresolver=letsencrypt
      - traefik.http.services.cache.loadbalancer.server.port=80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # LOG AGGREGATION
  # =================
  loki:
    image: grafana/loki:latest
    container_name: loki-master
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki:/etc/loki:ro
      - ./data/loki:/loki
    networks:
      - media-network
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  promtail:
    image: grafana/promtail:latest
    container_name: promtail-master
    restart: unless-stopped
    volumes:
      - ./config/promtail:/etc/promtail:ro
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - media-network
    command: -config.file=/etc/promtail/config.yml
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9080/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # HEALTH CHECK SERVICE
  # =================
  healthcheck:
    image: alpine:latest
    container_name: healthcheck-master
    restart: unless-stopped
    volumes:
      - ./scripts/health-check.sh:/health-check.sh:ro
    networks:
      - media-network
    command: sh -c "while true; do /health-check.sh; sleep 60; done"
    depends_on:
      - traefik
      - jellyfin
      - ai-ml-nexus
      - quantum-security