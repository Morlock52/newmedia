version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: holomedia-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-holomedia}
      POSTGRES_USER: ${DB_USER:-holomedia}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-holomedia}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - holomedia-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: holomedia-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-changeme}
      --appendonly yes
      --appendfilename "redis.aof"
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - holomedia-network

  # Elasticsearch (for advanced search)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: holomedia-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - cluster.name=holomedia-cluster
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - holomedia-network

  # MinIO (S3-compatible object storage)
  minio:
    image: minio/minio:latest
    container_name: holomedia-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_DEFAULT_BUCKETS: ${MINIO_BUCKETS:-uploads,backups,media}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - holomedia-network

  # RabbitMQ (Message Queue)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: holomedia-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-holomedia}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-changeme}
      RABBITMQ_DEFAULT_VHOST: holomedia
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - holomedia-network

  # Application Backend
  backend:
    build:
      context: ../
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: holomedia-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-holomedia}
      DB_USER: ${DB_USER:-holomedia}
      DB_PASSWORD: ${DB_PASSWORD:-changeme}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      ELASTICSEARCH_URL: http://elasticsearch:9200
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-holomedia}:${RABBITMQ_PASSWORD:-changeme}@rabbitmq:5672/holomedia
    volumes:
      - ../uploads:/app/uploads
      - ../logs:/app/logs
      - ../config:/app/config:ro
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - holomedia-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: holomedia-nginx
    restart: unless-stopped
    depends_on:
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ../ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - holomedia-network

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: holomedia-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - holomedia-network

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: holomedia-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - holomedia-network

  # Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: holomedia-backup
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-holomedia}
      DB_USER: ${DB_USER:-holomedia}
      DB_PASSWORD: ${DB_PASSWORD:-changeme}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - ../backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - holomedia-network

  # Worker Service (Background Jobs)
  worker:
    build:
      context: ../
      dockerfile: Dockerfile.worker
    container_name: holomedia-worker
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - rabbitmq
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-holomedia}
      DB_USER: ${DB_USER:-holomedia}
      DB_PASSWORD: ${DB_PASSWORD:-changeme}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-holomedia}:${RABBITMQ_PASSWORD:-changeme}@rabbitmq:5672/holomedia
    volumes:
      - ../logs:/app/logs
    networks:
      - holomedia-network

  # Adminer (Database Management)
  adminer:
    image: adminer:latest
    container_name: holomedia-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8080:8080"
    networks:
      - holomedia-network
    profiles:
      - debug

  # Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: holomedia-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - holomedia-network
    profiles:
      - debug

# Networks
networks:
  holomedia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
  minio-data:
    driver: local
  rabbitmq-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local