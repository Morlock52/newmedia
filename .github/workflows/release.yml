name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/newmedia

jobs:
  # =================
  # PREPARE RELEASE
  # =================
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      previous_version: ${{ steps.version.outputs.previous_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          # Validate semantic version
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?(\+[a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "Error: Invalid semantic version: $VERSION"
            exit 1
          fi
          
          # Get previous version
          PREVIOUS_VERSION=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "v0.0.0")
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION (previous: $PREVIOUS_VERSION)"

      - name: Generate changelog
        id: changelog
        run: |
          # Use conventional commits to generate changelog
          npm install -g conventional-changelog-cli
          
          conventional-changelog -p angular -i CHANGELOG.md -s -r 1
          
          # Extract just the latest release notes
          CHANGELOG=$(sed -n '/^#/,/^#/{/^#/!p;}' CHANGELOG.md | head -n -1)
          
          # Save to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # =================
  # BUILD & TAG IMAGES
  # =================
  build-release-images:
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      matrix:
        service:
          - ai-ml-nexus
          - ar-vr-media
          - voice-ai-system
          - web3-blockchain
          - quantum-security
          - config-server
          - dashboard
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: secrets.DOCKER_HUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push release images
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ needs.prepare-release.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
            docker.io/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ needs.prepare-release.outputs.version }}
            docker.io/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
          labels: |
            org.opencontainers.image.title=${{ matrix.service }}
            org.opencontainers.image.version=${{ needs.prepare-release.outputs.version }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}

  # =================
  # CREATE HELM CHARTS
  # =================
  package-helm-charts:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release-images]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Package Helm charts
        run: |
          mkdir -p helm-packages
          
          # Package main chart
          if [ -d "charts/newmedia" ]; then
            helm package charts/newmedia \
              --version ${needs.prepare-release.outputs.version#v} \
              --app-version ${needs.prepare-release.outputs.version} \
              --destination helm-packages/
          fi
          
          # Package individual service charts
          for chart in charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              helm package "$chart" \
                --version ${needs.prepare-release.outputs.version#v} \
                --app-version ${needs.prepare-release.outputs.version} \
                --destination helm-packages/
            fi
          done

      - name: Upload Helm packages
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: helm-packages/
          retention-days: 90

  # =================
  # GENERATE RELEASE ASSETS
  # =================
  generate-assets:
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release archives
        run: |
          VERSION=${{ needs.prepare-release.outputs.version }}
          mkdir -p release-assets
          
          # Docker Compose bundle
          tar -czf release-assets/newmedia-compose-${VERSION}.tar.gz \
            docker-compose*.yml \
            .env.example \
            scripts/ \
            docs/deployment.md
          
          # Configuration templates
          tar -czf release-assets/newmedia-configs-${VERSION}.tar.gz \
            config/ \
            systemd/ \
            nginx/
          
          # Kubernetes manifests
          if [ -d "k8s" ]; then
            tar -czf release-assets/newmedia-k8s-${VERSION}.tar.gz k8s/
          fi

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          artifact-name: newmedia-sbom-${{ needs.prepare-release.outputs.version }}.spdx.json

      - name: Generate dependency list
        run: |
          # Aggregate all dependencies
          echo "# Dependency Report for ${{ needs.prepare-release.outputs.version }}" > release-assets/dependencies.md
          echo "" >> release-assets/dependencies.md
          
          # NPM dependencies
          echo "## NPM Dependencies" >> release-assets/dependencies.md
          find . -name "package.json" -not -path "*/node_modules/*" | while read pkg; do
            echo "### $(dirname $pkg)" >> release-assets/dependencies.md
            jq -r '.dependencies | to_entries | .[] | "- \(.key): \(.value)"' "$pkg" >> release-assets/dependencies.md 2>/dev/null || true
            echo "" >> release-assets/dependencies.md
          done
          
          # Python dependencies
          echo "## Python Dependencies" >> release-assets/dependencies.md
          find . -name "requirements.txt" | while read req; do
            echo "### $(dirname $req)" >> release-assets/dependencies.md
            cat "$req" | grep -v '^#' | grep -v '^$' | sed 's/^/- /' >> release-assets/dependencies.md
            echo "" >> release-assets/dependencies.md
          done

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: release-assets/
          retention-days: 90

  # =================
  # CREATE GITHUB RELEASE
  # =================
  create-release:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release-images, package-helm-charts, generate-assets]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate release notes
        run: |
          cat > release-notes.md << 'EOF'
          # Release ${{ needs.prepare-release.outputs.version }}
          
          ## 🎉 Highlights
          
          ${{ needs.prepare-release.outputs.changelog }}
          
          ## 📦 Docker Images
          
          ### GitHub Container Registry
          ```bash
          # Pull all services
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-ai-ml-nexus:${{ needs.prepare-release.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-ar-vr-media:${{ needs.prepare-release.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-voice-ai-system:${{ needs.prepare-release.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-web3-blockchain:${{ needs.prepare-release.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-quantum-security:${{ needs.prepare-release.outputs.version }}
          ```
          
          ### Docker Hub
          ```bash
          docker pull docker.io/${{ env.IMAGE_PREFIX }}-ai-ml-nexus:${{ needs.prepare-release.outputs.version }}
          # ... (other services)
          ```
          
          ## 🚀 Deployment
          
          ### Using Docker Compose
          ```bash
          # Download and extract
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ needs.prepare-release.outputs.version }}/newmedia-compose-${{ needs.prepare-release.outputs.version }}.tar.gz | tar -xz
          
          # Deploy
          docker-compose up -d
          ```
          
          ### Using Helm
          ```bash
          helm repo add newmedia https://${{ github.repository_owner }}.github.io/newmedia-charts
          helm install newmedia newmedia/newmedia --version ${needs.prepare-release.outputs.version#v}
          ```
          
          ## 📋 Checksums
          
          ```
          $(cd artifacts && find . -type f -exec sha256sum {} \; | grep -v ".md")
          ```
          
          ## 🔗 Links
          
          - [Documentation](https://github.com/${{ github.repository }}/wiki)
          - [Migration Guide](https://github.com/${{ github.repository }}/blob/main/docs/migration.md)
          - [API Reference](https://github.com/${{ github.repository }}/blob/main/docs/api.md)
          
          ## 🙏 Contributors
          
          Thank you to all contributors who made this release possible!
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ needs.prepare-release.outputs.previous_version }}...${{ needs.prepare-release.outputs.version }}
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          name: ${{ needs.prepare-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: |
            artifacts/release-assets/*
            artifacts/helm-charts/*
            artifacts/*.spdx.json

  # =================
  # UPDATE DOCUMENTATION
  # =================
  update-docs:
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version references
        run: |
          VERSION=${{ needs.prepare-release.outputs.version }}
          
          # Update README
          sed -i "s/version: .*/version: $VERSION/g" README.md
          sed -i "s/newmedia:v[0-9]\+\.[0-9]\+\.[0-9]\+/newmedia:$VERSION/g" README.md
          
          # Update docker-compose examples
          find . -name "docker-compose*.yml" -type f | xargs sed -i "s/:v[0-9]\+\.[0-9]\+\.[0-9]\+/:$VERSION/g"
          
          # Update Helm chart versions
          find charts -name "Chart.yaml" -type f | xargs sed -i "s/^version: .*/version: ${VERSION#v}/g"
          find charts -name "Chart.yaml" -type f | xargs sed -i "s/^appVersion: .*/appVersion: $VERSION/g"

      - name: Create PR for documentation updates
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: 'docs: update version to ${{ needs.prepare-release.outputs.version }}'
          title: '[Release] Update documentation for ${{ needs.prepare-release.outputs.version }}'
          body: |
            ## Documentation Updates
            
            This PR updates all version references to ${{ needs.prepare-release.outputs.version }}.
            
            ### Changes
            - Updated README.md
            - Updated Docker Compose files
            - Updated Helm charts
            - Updated example configurations
            
            ### Checklist
            - [ ] All version references updated
            - [ ] Documentation builds successfully
            - [ ] Examples tested with new version
          branch: release-docs-${{ needs.prepare-release.outputs.version }}
          labels: |
            documentation
            release
            automated

  # =================
  # POST-RELEASE TASKS
  # =================
  post-release:
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: success()
    
    steps:
      - name: Notify Slack
        if: secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚀 New Release Published!",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Version", "value": "${{ needs.prepare-release.outputs.version }}", "short": true},
                  {"title": "Pre-release", "value": "${{ github.event.inputs.prerelease }}", "short": true},
                  {"title": "Release URL", "value": "https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }}"},
                  {"title": "Docker Images", "value": "Available on GHCR and Docker Hub"}
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Trigger deployment workflows
        if: github.event.inputs.prerelease != 'true'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: new-release
          client-payload: '{"version": "${{ needs.prepare-release.outputs.version }}"}'