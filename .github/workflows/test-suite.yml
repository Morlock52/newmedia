name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        type: choice
        options:
          - all
          - integration
          - performance
          - security
          - smoke
        default: 'all'
      environment:
        description: 'Test environment'
        required: true
        type: choice
        options:
          - ci
          - staging
          - production
        default: 'ci'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # =================
  # SMOKE TESTS (Quick validation)
  # =================
  smoke-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment
        run: |
          mkdir -p tests/reports
          cp .env.example .env

      - name: Start essential services
        run: |
          docker-compose up -d jellyfin homepage
          sleep 30

      - name: Run smoke tests
        run: |
          cd tests
          chmod +x run-tests.sh
          ./run-tests.sh smoke ci

      - name: Upload smoke test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: tests/reports/

  # =================
  # INTEGRATION TESTS
  # =================
  integration-tests:
    runs-on: ubuntu-latest
    needs: smoke-tests
    timeout-minutes: 30
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: tests/package-lock.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install test dependencies
        run: |
          cd tests
          npm ci

      - name: Create test environment
        run: |
          cp .env.example .env
          echo "NODE_ENV=test" >> .env
          echo "BASE_URL=http://localhost" >> .env

      - name: Start services
        run: |
          docker-compose up -d
          sleep 60  # Wait for services to be ready

      - name: Wait for services to be healthy
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8096/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:3001/; do sleep 5; done'

      - name: Run integration tests
        run: |
          cd tests
          ./run-tests.sh integration ci

      - name: Collect container logs
        if: failure()
        run: |
          mkdir -p tests/reports/logs
          for container in $(docker ps --format "{{.Names}}"); do
            docker logs "$container" > "tests/reports/logs/${container}.log" 2>&1
          done

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-node-${{ matrix.node-version }}
          path: tests/reports/

  # =================
  # SECURITY TESTS
  # =================
  security-tests:
    runs-on: ubuntu-latest
    needs: smoke-tests
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install security tools
        run: |
          # Install Trivy
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Pull Docker images
        run: |
          # Pull all images to scan
          docker-compose pull

      - name: Run security tests
        run: |
          cd tests
          chmod +x security/*.sh
          ./run-tests.sh security ci

      - name: Upload security scan results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tests/reports/security/trivy-results.sarif
        continue-on-error: true

      - name: Upload security test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: tests/reports/security/

  # =================
  # PERFORMANCE TESTS
  # =================
  performance-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    timeout-minutes: 60
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'performance')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start services with optimized settings
        run: |
          cp .env.example .env
          echo "COMPOSE_PROFILES=performance" >> .env
          docker-compose up -d
          sleep 90  # Extended wait for performance testing

      - name: Run performance tests
        run: |
          cd tests
          ./run-tests.sh performance ci

      - name: Generate performance report
        if: always()
        run: |
          cd tests/reports
          echo "## Performance Test Results" > performance-summary.md
          echo "" >> performance-summary.md
          echo "Test run completed on $(date)" >> performance-summary.md
          
          if [ -f "performance/k6-summary.json" ]; then
            echo "### Key Metrics" >> performance-summary.md
            jq -r '.metrics | to_entries | map("- \(.key): \(.value.value // .value.values.avg)") | .[]' performance/k6-summary.json >> performance-summary.md
          fi

      - name: Comment performance results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('tests/reports/performance-summary.md')) {
              const report = fs.readFileSync('tests/reports/performance-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }

      - name: Upload performance test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: tests/reports/performance/

  # =================
  # FULL TEST SUITE
  # =================
  full-test-suite:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-tests]
    timeout-minutes: 90
    if: github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: tests/package-lock.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install all tools
        run: |
          cd tests
          npm ci
          
          # Install security tools
          sudo apt-get update
          sudo apt-get install -y trivy
          
          # Install k6
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start full environment
        run: |
          cp .env.example .env
          docker-compose up -d
          sleep 120  # Extended wait for full environment

      - name: Run comprehensive test suite
        run: |
          cd tests
          ./run-tests.sh all ci

      - name: Generate comprehensive report
        if: always()
        run: |
          cd tests
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            const reportDir = 'reports';
            const summary = {
              timestamp: new Date().toISOString(),
              integration: fs.existsSync(path.join(reportDir, 'integration-test-report.html')),
              performance: fs.existsSync(path.join(reportDir, 'performance')),
              security: fs.existsSync(path.join(reportDir, 'security')),
              overall: 'unknown'
            };
            
            // Determine overall status
            if (summary.integration && summary.security) {
              summary.overall = 'passed';
            } else {
              summary.overall = 'failed';
            }
            
            fs.writeFileSync(path.join(reportDir, 'comprehensive-summary.json'), JSON.stringify(summary, null, 2));
            console.log('Comprehensive test summary:', summary);
          "

      - name: Upload comprehensive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-results
          path: tests/reports/

  # =================
  # TEST RESULT ANALYSIS
  # =================
  analyze-results:
    runs-on: ubuntu-latest
    needs: [smoke-tests, integration-tests, security-tests]
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: '*-test-results*'
          path: all-results
          merge-multiple: true

      - name: Analyze test results
        run: |
          echo "## Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "| Test Type | Status | Details |" >> test-summary.md
          echo "|-----------|--------|---------|" >> test-summary.md
          
          # Check each test type
          if [ -f "all-results/test-summary.json" ]; then
            echo "| Integration | ✅ Passed | Results available |" >> test-summary.md
          else
            echo "| Integration | ❌ Failed | Check logs |" >> test-summary.md
          fi
          
          if [ -d "all-results/security" ]; then
            echo "| Security | ✅ Passed | Scans completed |" >> test-summary.md
          else
            echo "| Security | ❌ Failed | Scans failed |" >> test-summary.md
          fi
          
          if [ -d "all-results/performance" ]; then
            echo "| Performance | ✅ Passed | Metrics collected |" >> test-summary.md
          else
            echo "| Performance | ⏭️ Skipped | Not run |" >> test-summary.md
          fi
          
          echo "" >> test-summary.md
          echo "Full reports are available in the workflow artifacts." >> test-summary.md

      - name: Comment test summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('test-summary.md')) {
              const summary = fs.readFileSync('test-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  # =================
  # CLEANUP
  # =================
  cleanup:
    runs-on: ubuntu-latest
    needs: [analyze-results]
    if: always()
    
    steps:
      - name: Cleanup Docker resources
        run: |
          docker system prune -af
          docker volume prune -f