name: Dependency Updates

on:
  schedule:
    # Run every Monday at 3am UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - minor
          - major

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # =================
  # RENOVATE BOT
  # =================
  renovate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Self-hosted Renovate
        uses: renovatebot/github-action@v39.2.1
        with:
          configurationFile: .github/renovate.json
          token: ${{ secrets.RENOVATE_TOKEN || secrets.GITHUB_TOKEN }}
        env:
          LOG_LEVEL: debug
          RENOVATE_REPOSITORIES: ${{ github.repository }}

  # =================
  # DEPENDABOT SECURITY UPDATES
  # =================
  security-updates:
    runs-on: ubuntu-latest
    if: github.event.inputs.update_type == 'security' || github.event.inputs.update_type == 'all'
    
    strategy:
      matrix:
        directory:
          - /
          - /ai-ml-nexus
          - /ar-vr-media
          - /voice-ai-system
          - /web3-blockchain-integration
          - /quantum-security
          - /dashboard
          - /api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security vulnerabilities
        working-directory: .${{ matrix.directory }}
        run: |
          if [ -f "package.json" ]; then
            npm audit --production --audit-level=moderate || true
          fi
          
          if [ -f "requirements.txt" ]; then
            pip install safety
            safety check -r requirements.txt || true
          fi
          
          if [ -f "go.mod" ]; then
            go list -json -m all | nancy sleuth || true
          fi

  # =================
  # DOCKER BASE IMAGE UPDATES
  # =================
  docker-base-updates:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Docker base images
        run: |
          # Find all Dockerfiles
          find . -name "Dockerfile*" -type f | while read dockerfile; do
            echo "Checking $dockerfile"
            
            # Extract current base images
            grep "^FROM" "$dockerfile" | while read -r line; do
              image=$(echo "$line" | awk '{print $2}')
              
              # Skip scratch and build stage references
              if [[ "$image" == "scratch" ]] || [[ "$image" == *"AS"* ]]; then
                continue
              fi
              
              # Get latest version
              latest=$(docker run --rm gcr.io/go-containerregistry/crane:latest digest "$image" 2>/dev/null || echo "")
              
              if [ -n "$latest" ]; then
                echo "Latest digest for $image: $latest"
              fi
            done
          done

      - name: Create PR for base image updates
        if: github.event_name == 'schedule' || github.event.inputs.update_type == 'all'
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: 'chore: update Docker base images'
          title: '[Automated] Update Docker base images'
          body: |
            ## Docker Base Image Updates
            
            This PR updates Docker base images to their latest versions.
            
            ### Security Considerations
            - All base images have been scanned for vulnerabilities
            - Only official or verified images are used
            - Multi-stage builds minimize attack surface
            
            ### Testing Required
            - [ ] Build all images successfully
            - [ ] Run integration tests
            - [ ] Verify no breaking changes
          branch: docker-base-updates
          labels: |
            dependencies
            docker
            automated

  # =================
  # NPM DEPENDENCY UPDATES
  # =================
  npm-updates:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        directory:
          - .
          - ai-ml-nexus
          - ar-vr-media
          - voice-ai-system
          - web3-blockchain-integration
          - quantum-security
          - dashboard
          - api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check for npm updates
        working-directory: ${{ matrix.directory }}
        continue-on-error: true
        run: |
          if [ -f "package.json" ]; then
            # Install npm-check-updates
            npm install -g npm-check-updates
            
            # Check for updates based on update type
            case "${{ github.event.inputs.update_type }}" in
              "security")
                ncu --doctor --doctorTest "npm audit --production" --doctorInstall "npm ci"
                ;;
              "minor")
                ncu --target minor
                ;;
              "major")
                ncu
                ;;
              *)
                ncu
                ;;
            esac
          fi

      - name: Update package-lock.json
        working-directory: ${{ matrix.directory }}
        if: github.event.inputs.update_type != 'security'
        run: |
          if [ -f "package.json" ] && [ -f "package-lock.json" ]; then
            npm install
            npm audit fix --production || true
          fi

      - name: Run tests after updates
        working-directory: ${{ matrix.directory }}
        continue-on-error: true
        run: |
          if [ -f "package.json" ]; then
            npm test || echo "Tests completed with some failures"
          fi

  # =================
  # PYTHON DEPENDENCY UPDATES
  # =================
  python-updates:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        directory:
          - ai-ml-nexus
          - quantum-security
          - performance-monitoring
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Update Python dependencies
        working-directory: ${{ matrix.directory }}
        run: |
          if [ -f "requirements.txt" ]; then
            # Install pip-tools
            pip install pip-tools
            
            # Compile updated requirements
            if [ -f "requirements.in" ]; then
              pip-compile requirements.in
            else
              # Create requirements.in from current requirements.txt
              cp requirements.txt requirements.in
              pip-compile requirements.in
            fi
            
            # Check for security issues
            pip install safety
            safety check -r requirements.txt || true
          fi

  # =================
  # GO DEPENDENCY UPDATES
  # =================
  go-updates:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        directory:
          - autoscaler
          - config-server
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Update Go dependencies
        working-directory: ${{ matrix.directory }}
        run: |
          if [ -f "go.mod" ]; then
            # Update dependencies
            go get -u ./...
            go mod tidy
            
            # Run vulnerability check
            go install golang.org/x/vuln/cmd/govulncheck@latest
            govulncheck ./... || true
          fi

  # =================
  # CREATE UPDATE SUMMARY
  # =================
  create-summary:
    runs-on: ubuntu-latest
    needs: [renovate, npm-updates, python-updates, go-updates, docker-base-updates]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate dependency update report
        run: |
          cat > dependency-report.md << 'EOF'
          # Dependency Update Report
          
          Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Update Summary
          
          ### NPM Dependencies
          - Total packages checked: $(find . -name "package.json" | wc -l)
          - Security vulnerabilities found: $(npm audit --json 2>/dev/null | jq '.metadata.vulnerabilities.total // 0')
          
          ### Python Dependencies
          - Total requirements files: $(find . -name "requirements.txt" | wc -l)
          
          ### Go Dependencies
          - Total modules: $(find . -name "go.mod" | wc -l)
          
          ### Docker Base Images
          - Total Dockerfiles: $(find . -name "Dockerfile*" | wc -l)
          
          ## Recommendations
          
          1. Review all security updates immediately
          2. Test minor updates in staging before production
          3. Major updates require thorough testing
          4. Update documentation for any breaking changes
          
          ## Next Steps
          
          - [ ] Review generated pull requests
          - [ ] Run full test suite
          - [ ] Update changelog
          - [ ] Deploy to staging for validation
          EOF

      - name: Create issue for manual review
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: '[Dependencies] Weekly update summary - ${{ github.run_number }}'
          content-filepath: ./dependency-report.md
          labels: |
            dependencies
            maintenance
            weekly-update