name: Docker Build & Push

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registries'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  # Registry configurations
  GHCR_REGISTRY: ghcr.io
  DOCKER_REGISTRY: docker.io
  
  # Image naming
  IMAGE_PREFIX: ${{ github.repository_owner }}/newmedia
  
  # Build platforms
  PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7
  
  # Caching
  BUILDX_CACHE_DIR: /tmp/.buildx-cache

jobs:
  # =================
  # PREPARE BUILD MATRIX
  # =================
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            VERSION=latest
          elif [[ "${{ github.ref }}" == refs/heads/develop ]]; then
            VERSION=dev-$(git rev-parse --short HEAD)
          else
            VERSION=pr-${{ github.event.pull_request.number }}-$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Discover services
        id: set-matrix
        run: |
          # Find all directories with Dockerfiles
          SERVICES=$(find . -name "Dockerfile*" -type f | \
            grep -v node_modules | \
            grep -v test | \
            grep -v example | \
            xargs -I {} dirname {} | \
            sort -u | \
            jq -R -s -c 'split("\n")[:-1] | map({
              name: split("/")[-1],
              context: .,
              dockerfile: . + "/Dockerfile"
            })')
          
          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          echo "Found services: $SERVICES"

  # =================
  # SECURITY SCANNING
  # =================
  security-scan:
    runs-on: ubuntu-latest
    needs: prepare-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (repo)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-repo.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0' # Don't fail on vulnerabilities

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-repo.sarif'
          category: 'trivy-repo'

      - name: Run Checkov security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile
          output_format: sarif
          output_file_path: checkov.sarif
          soft_fail: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif
          category: 'checkov'

  # =================
  # BUILD DOCKER IMAGES
  # =================
  build-images:
    runs-on: ubuntu-latest
    needs: [prepare-matrix, security-scan]
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.prepare-matrix.outputs.services) }}
    
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest
          buildkitd-flags: --debug
          config-inline: |
            [worker.oci]
              max-parallelism = 4

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request' || github.event.inputs.push_images == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: (github.event_name != 'pull_request' || github.event.inputs.push_images == 'true') && secrets.DOCKER_HUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=${{ needs.prepare-matrix.outputs.version }}-
            type=raw,value=${{ needs.prepare-matrix.outputs.version }}

      - name: Setup Docker build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILDX_CACHE_DIR }}
          key: ${{ runner.os }}-buildx-${{ matrix.service.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service.name }}-
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          platforms: ${{ env.PLATFORMS }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=local,src=${{ env.BUILDX_CACHE_DIR }}
            type=registry,ref=${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}:buildcache
          cache-to: |
            type=local,dest=${{ env.BUILDX_CACHE_DIR }}-new,mode=max
            type=registry,ref=${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION=${{ needs.prepare-matrix.outputs.version }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

      - name: Run Trivy vulnerability scanner (image)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}:${{ needs.prepare-matrix.outputs.version }}
          format: 'sarif'
          output: 'trivy-image-${{ matrix.service.name }}.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-${{ matrix.service.name }}.sarif'
          category: 'trivy-image-${{ matrix.service.name }}'

      - name: Run Snyk vulnerability scanner
        if: secrets.SNYK_TOKEN != ''
        continue-on-error: true
        run: |
          docker run --rm \
            -e SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/project \
            snyk/snyk:docker test \
            ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}:${{ needs.prepare-matrix.outputs.version }} \
            --severity-threshold=high \
            --json-file-output=snyk-${{ matrix.service.name }}.json

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}:${{ needs.prepare-matrix.outputs.version }}
          artifact-name: sbom-${{ matrix.service.name }}.spdx.json
          format: spdx-json

      - name: Run container structure tests
        if: hashFiles(format('{0}/container-structure-test.yaml', matrix.service.context)) != ''
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          ./container-structure-test-linux-amd64 test \
            --image ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}:${{ needs.prepare-matrix.outputs.version }} \
            --config ${{ matrix.service.context }}/container-structure-test.yaml

      - name: Push Docker image
        if: github.event_name != 'pull_request' || github.event.inputs.push_images == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=${{ env.BUILDX_CACHE_DIR }}
          cache-to: type=inline

      - name: Update build cache
        run: |
          rm -rf ${{ env.BUILDX_CACHE_DIR }}
          mv ${{ env.BUILDX_CACHE_DIR }}-new ${{ env.BUILDX_CACHE_DIR }}

      - name: Sign container image
        if: github.event_name != 'pull_request' && secrets.COSIGN_KEY != ''
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "$COSIGN_KEY" > cosign.key
          cosign sign --key cosign.key ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}:${{ needs.prepare-matrix.outputs.version }}
          rm cosign.key

  # =================
  # INTEGRATION TESTS
  # =================
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create test environment
        run: |
          cat > .env.test << EOF
          COMPOSE_PROJECT_NAME=newmedia-test
          REGISTRY=${{ env.GHCR_REGISTRY }}
          IMAGE_PREFIX=${{ env.IMAGE_PREFIX }}
          VERSION=${{ needs.prepare-matrix.outputs.version }}
          DOMAIN=localhost
          TZ=UTC
          EOF

      - name: Run integration test suite
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
          
          # Wait for services to be healthy
          timeout 300s bash -c 'until docker-compose ps | grep -E "(healthy|running)" | wc -l | grep -q "$(docker-compose ps -q | wc -l)"; do sleep 5; done'
          
          # Run integration tests
          docker-compose -f docker-compose.yml -f docker-compose.test.yml \
            run --rm test-runner npm test

      - name: Collect test results
        if: always()
        run: |
          mkdir -p test-results
          docker-compose logs --no-color > test-results/docker-compose.log
          docker-compose ps > test-results/container-status.txt

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.test.yml down -v

  # =================
  # RELEASE MANAGEMENT
  # =================
  release:
    runs-on: ubuntu-latest
    needs: [build-images, integration-tests]
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $VERSION^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$VERSION)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)")
          fi
          
          cat > release-notes.md << EOF
          ## Release $VERSION
          
          ### What's Changed
          $COMMITS
          
          ### Docker Images
          - GHCR: \`${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_PREFIX }}-*:$VERSION\`
          - Docker Hub: \`${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-*:$VERSION\`
          
          ### Full Changelog
          ${PREVIOUS_TAG:+$PREVIOUS_TAG..}$VERSION
          EOF
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(steps.release-notes.outputs.version, '-') }}
          generate_release_notes: true
          files: |
            docker-compose.yml
            docker-compose.prod.yml
            .env.example

  # =================
  # CLEANUP OLD IMAGES
  # =================
  cleanup-images:
    runs-on: ubuntu-latest
    needs: [build-images, release]
    if: always() && github.event_name != 'pull_request'
    
    permissions:
      packages: write
    
    steps:
      - name: Delete untagged images from GHCR
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_PREFIX }}-*
          package-type: container
          delete-only-untagged-versions: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete old PR images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_PREFIX }}-*
          package-type: container
          min-versions-to-keep: 0
          ignore-versions: '^(latest|main|develop|v\d+\.\d+\.\d+)$'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Keep only recent versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_PREFIX }}-*
          package-type: container
          min-versions-to-keep: 10
          token: ${{ secrets.GITHUB_TOKEN }}