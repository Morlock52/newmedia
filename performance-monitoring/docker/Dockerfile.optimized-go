# Ultra-optimized Go Dockerfile
# Achieves ~95% size reduction with scratch base image

# Stage 1: Build environment
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    ca-certificates \
    git \
    make \
    upx

WORKDIR /build

# Copy go mod files first (better caching)
COPY go.mod go.sum ./

# Download dependencies with cache
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download && \
    go mod verify

# Copy source code
COPY . .

# Build with maximum optimization
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    go build \
        -ldflags='-s -w -extldflags "-static"' \
        -a \
        -installsuffix cgo \
        -trimpath \
        -o app \
        ./cmd/main.go && \
    # Compress binary with UPX
    upx --best --lzma app

# Stage 2: Minimal runtime
FROM scratch AS runtime

# Copy SSL certificates for HTTPS
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the binary
COPY --from=builder /build/app /app

# Copy any static files if needed
# COPY --from=builder /build/static /static

# Add non-root user info
COPY --from=builder /etc/passwd /etc/passwd

# Use non-root user
USER nobody:nobody

EXPOSE 8080

# Health check using the app itself
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["/app", "healthcheck"]

ENTRYPOINT ["/app"]