# Optimized Python Dockerfile with multi-stage build
# Achieves ~70% size reduction with faster startup

# Stage 1: Python dependencies builder
FROM python:3.11-slim AS python-deps

# Install build dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        gcc \
        g++ \
        libc-dev \
        libffi-dev \
        libssl-dev \
        libpq-dev \
        make && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy requirements first (better cache)
COPY requirements*.txt ./

# Install Python dependencies with cache mount
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip setuptools wheel && \
    pip install --user --no-warn-script-location -r requirements.txt && \
    if [ -f requirements-dev.txt ]; then \
        pip install --user --no-warn-script-location -r requirements-dev.txt; \
    fi

# Stage 2: Build application
FROM python:3.11-slim AS builder

WORKDIR /app

# Copy installed packages from deps stage
COPY --from=python-deps /root/.local /root/.local

# Copy application code
COPY . .

# Compile Python files for faster startup
RUN python -m compileall -b -f -q /app && \
    find /app -name "*.py" -delete && \
    find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# Run any build scripts
RUN if [ -f "build.py" ]; then python build.py; fi

# Stage 3: Final runtime image
FROM python:3.11-slim AS runtime

# Install runtime dependencies only
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libpq5 \
        curl \
        ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r appuser && \
    useradd -r -g appuser -u 1001 -m -s /sbin/nologin appuser

WORKDIR /app

# Copy Python packages and compiled app
COPY --from=python-deps --chown=appuser:appuser /root/.local /home/appuser/.local
COPY --from=builder --chown=appuser:appuser /app /app

# Environment setup
ENV PATH=/home/appuser/.local/bin:$PATH \
    PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Performance optimizations for Python
ENV PYTHONOPTIMIZE=2 \
    MALLOC_TRIM_THRESHOLD_=100000

# Switch to non-root user
USER appuser

EXPOSE 8000

# Optimized health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"

# Use exec form to ensure proper signal handling
CMD ["python", "-O", "app.pyc"]