version: "3.9"

# Test environment setup for integration testing
# This compose file extends the main docker-compose.yml with test-specific configurations

networks:
  test_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  test_postgres_data:
  test_redis_data:
  test_media_data:

services:
  # =========================
  # Test Database
  # =========================
  test-postgres:
    image: postgres:15-alpine
    container_name: test-postgres
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    networks:
      test_network:
        ipv4_address: 172.30.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser"]
      interval: 5s
      timeout: 5s
      retries: 5

  # =========================
  # Test Redis
  # =========================
  test-redis:
    image: redis:7-alpine
    container_name: test-redis
    command: redis-server --requirepass testpass
    volumes:
      - test_redis_data:/data
    networks:
      test_network:
        ipv4_address: 172.30.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # =========================
  # Mock External Services
  # =========================
  mock-tmdb:
    image: mockserver/mockserver:latest
    container_name: mock-tmdb
    environment:
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/tmdb-expectations.json
    volumes:
      - ./integration/mocks/tmdb:/config:ro
    ports:
      - "1080:1080"
    networks:
      test_network:
        ipv4_address: 172.30.0.20

  mock-indexer:
    image: mockserver/mockserver:latest
    container_name: mock-indexer
    environment:
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/indexer-expectations.json
    volumes:
      - ./integration/mocks/indexer:/config:ro
    ports:
      - "1081:1080"
    networks:
      test_network:
        ipv4_address: 172.30.0.21

  # =========================
  # Test Runner Container
  # =========================
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: test-runner
    environment:
      TEST_ENV: "docker"
      DATABASE_URL: "postgresql://testuser:testpass@test-postgres:5432/testdb"
      REDIS_URL: "redis://:testpass@test-redis:6379"
      MOCK_TMDB_URL: "http://mock-tmdb:1080"
      MOCK_INDEXER_URL: "http://mock-indexer:1080"
    volumes:
      - ./integration:/tests/integration
      - ./performance:/tests/performance
      - ./security:/tests/security
      - ./reports:/tests/reports
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - test_network
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      mock-tmdb:
        condition: service_started
      mock-indexer:
        condition: service_started

  # =========================
  # Performance Test Tools
  # =========================
  k6:
    image: grafana/k6:latest
    container_name: k6-runner
    volumes:
      - ./performance:/scripts
      - ./reports:/reports
    networks:
      - test_network
    command: ["run", "--help"]  # Override with actual test command

  influxdb:
    image: influxdb:1.8
    container_name: test-influxdb
    environment:
      INFLUXDB_DB: k6
      INFLUXDB_HTTP_AUTH_ENABLED: "false"
    ports:
      - "8086:8086"
    networks:
      test_network:
        ipv4_address: 172.30.0.30

  grafana-k6:
    image: grafana/grafana:latest
    container_name: grafana-k6
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
    volumes:
      - ./performance/grafana:/etc/grafana/provisioning
    ports:
      - "3030:3000"
    networks:
      test_network:
        ipv4_address: 172.30.0.31
    depends_on:
      - influxdb

  # =========================
  # Security Testing Tools
  # =========================
  trivy:
    image: aquasec/trivy:latest
    container_name: trivy-scanner
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./reports/security:/reports
      - ./security/trivy-cache:/root/.cache/trivy
    networks:
      - test_network
    command: ["--help"]  # Override with scan command

  nuclei:
    image: projectdiscovery/nuclei:latest
    container_name: nuclei-scanner
    volumes:
      - ./security/nuclei-templates:/templates
      - ./reports/security:/reports
    networks:
      - test_network
    command: ["-h"]  # Override with scan command

  # =========================
  # Network Testing
  # =========================
  network-test:
    image: nicolaka/netshoot:latest
    container_name: network-test
    networks:
      - test_network
    command: ["sleep", "infinity"]
    cap_add:
      - NET_ADMIN
      - NET_RAW

  # =========================
  # API Testing
  # =========================
  newman:
    image: postman/newman:alpine
    container_name: newman-runner
    volumes:
      - ./integration/postman:/etc/newman
      - ./reports:/reports
    networks:
      - test_network
    command: ["--help"]  # Override with collection run