version: '3.8'

services:
  # Keycloak - OIDC Provider
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: consensus-keycloak
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD_FILE: /run/secrets/keycloak_db_password
      KC_HOSTNAME: auth.consensus.local
      KC_HOSTNAME_STRICT: 'false'
      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/certs/tls.crt
      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/certs/tls.key
      KC_HEALTH_ENABLED: 'true'
      KC_METRICS_ENABLED: 'true'
      KC_FEATURES: token-exchange,admin-fine-grained-authz
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD_FILE: /run/secrets/keycloak_admin_password
    ports:
      - "8443:8443"
      - "9000:9000" # Metrics
    volumes:
      - keycloak-data:/opt/keycloak/data
      - ./certs:/opt/keycloak/certs:ro
      - ./keycloak/themes:/opt/keycloak/themes
    secrets:
      - keycloak_db_password
      - keycloak_admin_password
    networks:
      - security
    depends_on:
      - keycloak-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    security_opt:
      - no-new-privileges:true
      - apparmor:keycloak-profile
    read_only: true
    tmpfs:
      - /tmp
      - /opt/keycloak/data/tmp

  # Keycloak Database
  keycloak-db:
    image: postgres:16-alpine
    container_name: consensus-keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD_FILE: /run/secrets/keycloak_db_password
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
      - ./postgres/init-keycloak.sql:/docker-entrypoint-initdb.d/init.sql:ro
    secrets:
      - keycloak_db_password
    networks:
      - security
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "keycloak"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    user: postgres

  # HashiCorp Vault
  vault:
    image: hashicorp/vault:1.15
    container_name: consensus-vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_ADDR: 'https://0.0.0.0:8200'
      VAULT_LOCAL_CONFIG: |
        ui = true
        
        listener "tcp" {
          address = "0.0.0.0:8200"
          tls_cert_file = "/vault/certs/tls.crt"
          tls_key_file = "/vault/certs/tls.key"
          tls_min_version = "tls13"
        }
        
        storage "raft" {
          path = "/vault/data"
          node_id = "vault-1"
        }
        
        seal "transit" {
          address = "https://vault-transit:8200"
          disable_renewal = "false"
          key_name = "autounseal"
          mount_path = "transit/"
        }
        
        telemetry {
          prometheus_retention_time = "30s"
          disable_hostname = true
        }
        
        api_addr = "https://vault.consensus.local:8200"
        cluster_addr = "https://vault.consensus.local:8201"
        disable_mlock = true
    ports:
      - "8200:8200"
      - "8201:8201"
    volumes:
      - vault-data:/vault/data
      - vault-logs:/vault/logs
      - ./certs:/vault/certs:ro
      - ./vault/policies:/vault/policies:ro
    networks:
      - security
    healthcheck:
      test: ["CMD", "vault", "status", "-tls-skip-verify"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    security_opt:
      - no-new-privileges:true
      - apparmor:vault-profile
    command: server

  # Falco - Runtime Security
  falco:
    image: falcosecurity/falco:0.36.0
    container_name: consensus-falco
    privileged: true
    environment:
      FALCO_GRPC_ENABLED: 'true'
      FALCO_GRPC_BIND_ADDRESS: '0.0.0.0:5060'
      FALCO_WEBSERVER_ENABLED: 'true'
      FALCO_WEBSERVER_LISTEN_PORT: '8765'
      FALCO_LOG_LEVEL: 'info'
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - /etc:/host/etc:ro
      - ./falco/rules:/etc/falco/rules.d:ro
      - falco-data:/var/lib/falco
    networks:
      - security
    ports:
      - "5060:5060" # gRPC
      - "8765:8765" # Metrics
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Trivy - Vulnerability Scanner
  trivy-server:
    image: aquasec/trivy:0.48.0
    container_name: consensus-trivy
    command: server --listen 0.0.0.0:8080
    ports:
      - "8080:8080"
    volumes:
      - trivy-cache:/root/.cache/trivy
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - security
    environment:
      TRIVY_CACHE_DIR: /root/.cache/trivy
      TRIVY_SEVERITY: CRITICAL,HIGH,MEDIUM
      TRIVY_IGNORE_UNFIXED: 'false'
      TRIVY_SKIP_UPDATE: 'false'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    security_opt:
      - no-new-privileges:true
    user: "10001:10001"

  # OWASP Dependency Check
  dependency-check:
    image: owasp/dependency-check:9.0.6
    container_name: consensus-dependency-check
    volumes:
      - dependency-check-data:/usr/share/dependency-check/data
      - ./reports:/reports
    networks:
      - security
    environment:
      DEPENDENCY_CHECK_SUPPRESSION: /config/suppression.xml
    command: >
      --scan /src
      --format ALL
      --project "Consensus System"
      --out /reports
      --enableExperimental
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    security_opt:
      - no-new-privileges:true

  # Grafana with Security Dashboards
  grafana-security:
    image: grafana/grafana:10.2.3
    container_name: consensus-grafana-security
    environment:
      GF_SECURITY_ADMIN_USER_FILE: /run/secrets/grafana_admin_user
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_admin_password
      GF_AUTH_GENERIC_OAUTH_ENABLED: 'true'
      GF_AUTH_GENERIC_OAUTH_NAME: Keycloak
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: grafana
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET_FILE: /run/secrets/grafana_oauth_secret
      GF_AUTH_GENERIC_OAUTH_SCOPES: openid profile email
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: https://auth.consensus.local:8443/realms/consensus-system/protocol/openid-connect/auth
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: https://auth.consensus.local:8443/realms/consensus-system/protocol/openid-connect/token
      GF_AUTH_GENERIC_OAUTH_API_URL: https://auth.consensus.local:8443/realms/consensus-system/protocol/openid-connect/userinfo
      GF_SERVER_ROOT_URL: https://grafana.consensus.local
    ports:
      - "3000:3000"
    volumes:
      - grafana-security-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    secrets:
      - grafana_admin_user
      - grafana_admin_password
      - grafana_oauth_secret
    networks:
      - security
    depends_on:
      - prometheus-security
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    user: "472:472"

  # Prometheus for Security Metrics
  prometheus-security:
    image: prom/prometheus:v2.48.0
    container_name: consensus-prometheus-security
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - prometheus-security-data:/prometheus
      - ./prometheus/prometheus-security.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts:/etc/prometheus/alerts:ro
    networks:
      - security
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"

  # Splunk Universal Forwarder (SIEM)
  splunk-forwarder:
    image: splunk/universalforwarder:9.1.2
    container_name: consensus-splunk-forwarder
    environment:
      SPLUNK_START_ARGS: --accept-license
      SPLUNK_PASSWORD_FILE: /run/secrets/splunk_password
      SPLUNK_FORWARD_SERVER: splunk.consensus.local:9997
      SPLUNK_DEPLOYMENT_SERVER: splunk.consensus.local:8089
      SPLUNK_ENABLE_LISTEN: 9997
      SPLUNK_ADD: monitor /var/log/consensus
    volumes:
      - ./logs:/var/log/consensus:ro
      - splunk-forwarder-var:/opt/splunk/var
    secrets:
      - splunk_password
    networks:
      - security
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

volumes:
  keycloak-data:
  keycloak-db-data:
  vault-data:
  vault-logs:
  falco-data:
  trivy-cache:
  dependency-check-data:
  grafana-security-data:
  prometheus-security-data:
  splunk-forwarder-var:

networks:
  security:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24
    driver_opts:
      com.docker.network.bridge.name: br-security
      com.docker.network.bridge.enable_icc: "false"

secrets:
  keycloak_db_password:
    external: true
  keycloak_admin_password:
    external: true
  grafana_admin_user:
    external: true
  grafana_admin_password:
    external: true
  grafana_oauth_secret:
    external: true
  splunk_password:
    external: true