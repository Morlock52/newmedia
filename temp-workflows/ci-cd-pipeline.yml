name: Integrated Media Server CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # =================
  # CODE QUALITY & SECURITY
  # =================
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [ai-ml-nexus, ar-vr-media, voice-ai-system, web3-blockchain-integration, quantum-security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package.json

      - name: Install dependencies
        run: |
          if [ -f "${{ matrix.component }}/package.json" ]; then
            cd ${{ matrix.component }}
            npm ci --prefer-offline --no-audit
          fi

      - name: Run ESLint
        run: |
          if [ -f "${{ matrix.component }}/package.json" ]; then
            cd ${{ matrix.component }}
            npm run lint || echo "Linting completed with warnings"
          fi

      - name: Run Security Audit
        run: |
          if [ -f "${{ matrix.component }}/package.json" ]; then
            cd ${{ matrix.component }}
            npm audit --audit-level moderate || echo "Security audit completed"
          fi

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # =================
  # TESTING MATRIX
  # =================
  test-matrix:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        test-suite:
          - name: "AI/ML Tests"
            component: "ai-ml-nexus"
            test-command: "npm test"
          - name: "AR/VR Tests"
            component: "ar-vr-media"
            test-command: "npm test"
          - name: "Voice AI Tests"
            component: "voice-ai-system"
            test-command: "npm test"
          - name: "Blockchain Tests"
            component: "web3-blockchain-integration"
            test-command: "npm test"
          - name: "Quantum Security Tests"
            component: "quantum-security"
            test-command: "npm test"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.test-suite.component }}/package.json

      - name: Install dependencies
        run: |
          if [ -f "${{ matrix.test-suite.component }}/package.json" ]; then
            cd ${{ matrix.test-suite.component }}
            npm ci --prefer-offline --no-audit
          fi

      - name: Run ${{ matrix.test-suite.name }}
        run: |
          if [ -f "${{ matrix.test-suite.component }}/package.json" ]; then
            cd ${{ matrix.test-suite.component }}
            ${{ matrix.test-suite.test-command }}
          fi
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite.component }}
          path: ${{ matrix.test-suite.component }}/test-results/
          retention-days: 7

  # =================
  # DOCKER BUILD MATRIX
  # =================
  build-images:
    runs-on: ubuntu-latest
    needs: test-matrix
    strategy:
      matrix:
        service:
          - name: ai-ml-nexus
            dockerfile: ai-ml-nexus/Dockerfile
            context: ai-ml-nexus
          - name: ar-vr-media
            dockerfile: ar-vr-media/Dockerfile
            context: ar-vr-media
          - name: voice-ai-system
            dockerfile: voice-ai-system/Dockerfile
            context: voice-ai-system
          - name: web3-blockchain
            dockerfile: web3-blockchain-integration/api/Dockerfile
            context: web3-blockchain-integration/api
          - name: quantum-security
            dockerfile: quantum-security/Dockerfile
            context: quantum-security
          - name: holographic-dashboard
            dockerfile: holographic-dashboard-demo/holographic-dashboard/Dockerfile
            context: holographic-dashboard-demo/holographic-dashboard
          - name: config-server
            dockerfile: config-server/Dockerfile
            context: config-server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create Dockerfile if not exists
        run: |
          if [ ! -f "${{ matrix.service.dockerfile }}" ]; then
            mkdir -p $(dirname ${{ matrix.service.dockerfile }})
            cat > ${{ matrix.service.dockerfile }} << 'EOF'
          FROM node:18-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production && npm cache clean --force
          COPY . .
          EXPOSE 3000
          HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
            CMD curl -f http://localhost:3000/health || exit 1
          CMD ["npm", "start"]
          EOF
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # =================
  # INTEGRATION TESTING
  # =================
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-images
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          DOMAIN=localhost
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=test_password
          REDIS_PASSWORD=test_password
          GRAFANA_ADMIN_PASSWORD=admin
          TRAEFIK_AUTH=admin:$$2y$$10$$example
          NODE_ENV=test
          EOF

      - name: Run integration tests
        run: |
          docker-compose -f docker-compose.master.yml --env-file .env.test up -d --build
          sleep 60  # Wait for services to start
          
          # Test service connectivity
          curl -f http://localhost:8096/health || echo "Jellyfin not ready"
          curl -f http://localhost:3001/health || echo "AI/ML service not ready"
          curl -f http://localhost:8082/health || echo "AR/VR service not ready"
          
          # Run API tests
          npm install -g newman
          if [ -f "tests/integration/api-tests.json" ]; then
            newman run tests/integration/api-tests.json
          fi

      - name: Collect logs
        if: always()
        run: |
          mkdir -p logs
          docker-compose -f docker-compose.master.yml logs --no-color > logs/docker-compose.log
          docker ps -a > logs/container-status.log

      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-logs
          path: logs/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.master.yml down -v

  # =================
  # DEPLOYMENT STAGING
  # =================
  deploy-staging:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Deploy to staging
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/media-server
            git pull origin develop
            docker-compose -f docker-compose.master.yml pull
            docker-compose -f docker-compose.master.yml up -d --remove-orphans
            docker image prune -f
          EOF

      - name: Run smoke tests
        run: |
          sleep 60
          curl -f https://staging.example.com/health || exit 1
          curl -f https://ai.staging.example.com/health || exit 1
          curl -f https://vr.staging.example.com/health || exit 1

  # =================
  # DEPLOYMENT PRODUCTION
  # =================
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Create deployment backup
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/media-server
            docker-compose -f docker-compose.master.yml exec postgres pg_dump -U $POSTGRES_USER mediaserver > backup-$(date +%Y%m%d-%H%M%S).sql
            tar -czf backup-volumes-$(date +%Y%m%d-%H%M%S).tar.gz data/ config/
          EOF

      - name: Deploy to production
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/media-server
            git pull origin main
            docker-compose -f docker-compose.master.yml pull
            docker-compose -f docker-compose.master.yml up -d --remove-orphans
            docker image prune -f
          EOF

      - name: Run production health checks
        run: |
          sleep 120
          curl -f https://example.com/health || exit 1
          curl -f https://ai.example.com/health || exit 1
          curl -f https://vr.example.com/health || exit 1
          curl -f https://voice.example.com/health || exit 1
          curl -f https://web3.example.com/health || exit 1
          curl -f https://quantum.example.com/health || exit 1

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment successful! 🚀'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment failed! 🚨'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =================
  # SECURITY SCANNING
  # =================
  security-scan:
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Docker Scout vulnerability scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-ml-nexus:latest
          only-severities: critical,high
          exit-code: true

  # =================
  # PERFORMANCE TESTING
  # =================
  performance-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          if [ -f "tests/performance/load-test.js" ]; then
            k6 run tests/performance/load-test.js
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: performance-results/
          retention-days: 30

  # =================
  # CLEANUP
  # =================
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production, security-scan, performance-tests]
    if: always()
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: true